{"version":3,"file":"smile-js.iife.js","sources":["../src/main/js/error.ts","../src/main/js/decoder.ts","../src/main/js/decoderStream.ts","../src/main/js/inputStream.ts","../src/main/js/sharedStringBuffer.ts","../src/main/js/parser.ts"],"sourcesContent":["/**\n * SMILE error.\n */\nexport class SmileError extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n","import {SmileError} from './error.js';\n\nconst bitMask = [0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff];\n\nexport class Decoder {\n    public decodeVInt(bytes: Uint8Array): number | bigint {\n        if (bytes.length <= 0) {\n            throw new SmileError('invalid VInt');\n        }\n        let value = BigInt(0);\n        for (let i = 0; i < bytes.length; i++) {\n            const n = bytes[i];\n            if (i < (bytes.length - 1)) {\n                if ((n & 0x80) !== 0x00) {\n                    throw new SmileError('invalid VInt');\n                }\n                value = (value * BigInt(128)) + BigInt(n & 0x7f);\n            } else {\n                if ((n & 0x80) !== 0x80) {\n                    throw new SmileError('invalid VInt');\n                }\n                value = (value * BigInt(64)) + BigInt(n & 0x3f);\n                break;\n            }\n        }\n        if ((value >= BigInt(Number.MIN_SAFE_INTEGER)) && (value <= BigInt(Number.MAX_SAFE_INTEGER))) {\n            return Number(value);\n        } else {\n            return value;\n        }\n    }\n\n    public decodeZigZag(value: number | bigint): number | bigint {\n        if (value < 0) {\n            throw new SmileError(\"illegal zigzag value\");\n        }\n        if (typeof value === 'bigint') {\n            if (value <= BigInt(2147483647)) {\n                if ((value % BigInt(2)) === BigInt(1)) {\n                    return Number(-(value >> BigInt(1)) - BigInt(1));\n                } else {\n                    return Number(value >> BigInt(1));\n                }\n            } else {\n                if ((value % BigInt(2)) === BigInt(1)) {\n                    const v = (value - BigInt(1)) / BigInt(2);\n                    return Number(-v - BigInt(1));\n                } else {\n                    const v = value / BigInt(2);\n                    return Number(v);\n                }\n            }\n        } else {\n            if (value <= 2147483647) {\n                if ((value % 2) === 1) {\n                    return -(value >> 1) - 1;\n                } else {\n                    return (value >> 1);\n                }\n            } else {\n                if ((value % 2) === 1) {\n                    return -((value - 1) / 2) - 1;\n                } else {\n                    return value / 2;\n                }\n            }\n        }\n    }\n\n    public decodeAscii(bytes: Uint8Array): string {\n        return new TextDecoder('ascii').decode(bytes);\n    }\n\n    public decodeUtf8(bytes: Uint8Array): string {\n        return new TextDecoder('utf8').decode(bytes);\n    }\n\n    private toDataView(bytes: Uint8Array): DataView {\n        const buffer = new ArrayBuffer(bytes.length);\n        const view = new DataView(buffer);\n        for (let i = 0; i < bytes.length; i++) {\n            view.setUint8(i, bytes[i])\n        }\n        return view;\n    }\n\n    // big-endian encoding\n    public decodeFloat32(bytes: Uint8Array): number {\n        return this.toDataView(bytes).getFloat32(0, false);\n    }\n\n    // big-endian encoding\n    public decodeFloat64(bytes: Uint8Array): number {\n        return this.toDataView(bytes).getFloat64(0, false);\n    }\n\n    public decodeFixedLengthBigEndianEncodedBits(bytes: Uint8Array, bits: number): Uint8Array {\n        const output = new Uint8Array(Math.ceil(bits / 8));\n        let iByte = 0;\n        let iBitsRemaining = bits % 7;\n        let oByte = 0;\n        let oBitsWritten = 0;\n        let currentInput = bytes[iByte];\n        let currentOutput = 0;\n        let oIndex;\n        while (iByte < bytes.length) {\n            const bitsToWrite = Math.min(iBitsRemaining, (8 - oBitsWritten));\n            currentOutput <<= bitsToWrite;\n            currentOutput |= currentInput >> (iBitsRemaining - bitsToWrite);\n            iBitsRemaining -= bitsToWrite;\n            currentInput &= bitMask[iBitsRemaining];\n            oBitsWritten += bitsToWrite;\n            if (iBitsRemaining === 0) {\n                iByte++;\n                iBitsRemaining = 7;\n                currentInput = bytes[iByte];\n            }\n            if (oBitsWritten === 8) {\n                oIndex = oByte;\n                output[oIndex] = currentOutput;\n                oByte++;\n                oBitsWritten = 0;\n                currentOutput = 0;\n            }\n        }\n        if (oBitsWritten > 0) {\n            currentOutput <<= (8 - oBitsWritten);\n            oIndex = oByte;\n            output[oIndex] = currentOutput;\n        }\n        return output;\n    }\n\n    public decodeSafeBinaryEncodedBits(bytes: Uint8Array, bits: number): Uint8Array {\n        const output = new Uint8Array(Math.ceil(bits / 8));\n        let iByte = 0;\n        let iBitsRemaining = 7;\n        let oByte = 0;\n        let oBitsWritten = 0;\n        let currentInput = bytes[iByte];\n        let currentOutput = 0;\n        while (oByte < output.length) {\n            const bitsToWrite = Math.min(iBitsRemaining, (8 - oBitsWritten));\n            currentOutput <<= bitsToWrite;\n            currentOutput |= currentInput >> (iBitsRemaining - bitsToWrite);\n            iBitsRemaining -= bitsToWrite;\n            currentInput &= bitMask[iBitsRemaining];\n            oBitsWritten += bitsToWrite;\n            if (iBitsRemaining === 0) {\n                iByte++;\n                iBitsRemaining = 7;\n                currentInput = bytes[iByte];\n            }\n            if (oBitsWritten === 8) {\n                output[oByte] = currentOutput;\n                oByte++;\n                oBitsWritten = 0;\n                currentOutput = 0;\n            }\n        }\n        if (oBitsWritten > 0) {\n            currentOutput <<= (8 - oBitsWritten);\n            output[oByte] = currentOutput;\n        }\n        return output;\n    }\n}\n","import {InputStream} from './inputStream.js';\nimport {Decoder} from './decoder.js';\nimport {SmileError} from './error.js';\n\nexport class DecoderStream {\n    private readonly inputStream: InputStream;\n    private readonly decoder: Decoder;\n\n    constructor(inputStream: InputStream) {\n        this.inputStream = inputStream;\n        this.decoder = new Decoder();\n    }\n\n    public isEof(): boolean {\n        return this.inputStream.isEof();\n    }\n\n    public read(): number {\n        return this.inputStream.read();\n    }\n\n    public peek(): number {\n        return this.inputStream.peek();\n    }\n\n    private readVIntBytes(): Uint8Array {\n        const bytes: number[] = [];\n        while (true) {\n            const n = this.read();\n            bytes.push(n);\n            if ((n & 0x80) === 0x80) {\n                break;\n            }\n        }\n        return new Uint8Array(bytes);\n    }\n\n    public readUnsignedVint(): number | bigint {\n        const bytes = this.readVIntBytes();\n        return this.decoder.decodeVInt(bytes);\n    }\n\n    public readSignedVint(): number | bigint {\n        return this.decoder.decodeZigZag(this.readUnsignedVint());\n    }\n\n    public readAscii(len: number): string {\n        return this.decoder.decodeAscii(this.inputStream.readArray(len));\n    }\n\n    public readUtf8(len: number): string {\n        return this.decoder.decodeUtf8(this.inputStream.readArray(len));\n    }\n\n    public readFloat32(): number {\n        return this.decoder.decodeFloat32(this.readFixedLengthBigEndianEncodedBits(32));\n    }\n\n    public readFloat64(): number {\n        return this.decoder.decodeFloat64(this.readFixedLengthBigEndianEncodedBits(64));\n    }\n\n    public readFixedLengthBigEndianEncodedBits(bits: number): Uint8Array {\n        const bytes = this.inputStream.readArray(Math.ceil(bits / 7));\n        return this.decoder.decodeFixedLengthBigEndianEncodedBits(bytes, bits);\n    }\n\n    public readSafeBinary(): Uint8Array {\n        const len = this.readUnsignedVint();\n        if (typeof(len) === 'bigint') {\n            throw new SmileError('invalid length');\n        }\n        const bytes = this.inputStream.readArray(Math.ceil(len * 8 / 7));\n        return this.decoder.decodeSafeBinaryEncodedBits(bytes, len * 8);\n    }\n\n    public readBigInt(): number {\n        const bytes = this.readSafeBinary();\n        let n = 0;\n        for (let i = 0; i < bytes.length; i++) {\n            n = (n * 256) + bytes[i];\n        }\n        return n;\n    }\n\n    public readBigDecimal(): number {\n        const scale = this.readSignedVint();\n        if (typeof(scale) === 'bigint') {\n            throw new SmileError('invalid scale');\n        }\n        const magnitude = this.readBigInt();\n        return magnitude * Math.pow(10, scale);\n    }\n\n    public readLongString(): Uint8Array {\n        const buffer: number[] = [];\n        while (true) {\n            const c = this.inputStream.read();\n            if (c === 0xfc) {\n                break;\n            }\n            buffer.push(c);\n        }\n        return new Uint8Array(buffer);\n    }\n\n    public readLongAscii() {\n        return this.decoder.decodeAscii(this.readLongString());\n    }\n\n    public readLongUtf8() {\n        return this.decoder.decodeUtf8(this.readLongString());\n    }\n\n    public readBytes(len: number): Uint8Array {\n        return this.inputStream.readArray(len);\n    }\n}\n","import {SmileError} from './error.js';\n\nexport const eofError = new SmileError('end of input stream reached');\n\nexport class InputStream {\n    private readonly array: Uint8Array;\n    private index: number = 0;\n\n    constructor(array: Uint8Array) {\n        this.array = array;\n    }\n\n    public isEof(): boolean {\n        return (this.index >= this.array.length);\n    }\n\n    public read(): number {\n        if (this.isEof()) {\n            throw eofError;\n        }\n        const v = this.array[this.index];\n        this.index++;\n        return v;\n    }\n\n    public readArray(n: number): Uint8Array {\n        if (this.isEof()) {\n            throw eofError;\n        }\n        if (n < 0) {\n            throw new SmileError('invalid read amount');\n        }\n        const endIndex = Math.min(this.array.length, this.index + n);\n        const readData = this.array.subarray(this.index, endIndex);\n        this.index = endIndex;\n        return readData;\n    }\n\n    public peek(): number {\n        if (this.isEof()) {\n            throw eofError;\n        }\n        return this.array[this.index];\n    }\n\n    public skip(n: number) {\n        if (this.isEof()) {\n            throw eofError;\n        }\n        if (n < 0) {\n            throw new SmileError('invalid skip amount');\n        }\n        this.index += n;\n    }\n}\n","import {SmileError} from './error.js';\n\nexport class SharedStringBuffer {\n    private readonly name: string;\n    private readonly keyMode: boolean;\n    private readonly enabled: boolean;\n    private readonly maxStrings: number;\n    private strings: string[];\n    private stringMap: { [key: string]: number };\n\n    constructor(name: string, keyMode: boolean, enabled: boolean, maxStrings: number) {\n        this.name = name;\n        this.keyMode = keyMode;\n        this.enabled = enabled;\n        this.maxStrings = maxStrings;\n        this.reset();\n        this.strings = [];\n        this.stringMap = {};\n        this.reset();\n    }\n\n    private reset(): void {\n        //console.log(`[${this.name}] ssb: reset`);\n        if (this.keyMode) {\n            this.strings = [];\n            this.stringMap = {};\n        } else {\n            this.strings = [''];\n            this.stringMap = {};\n        }\n    }\n\n    public static newValues(enabled: boolean): SharedStringBuffer {\n        return new SharedStringBuffer('values', false, enabled, 1024);\n    }\n\n    public static newKeyNames(enabled: boolean): SharedStringBuffer {\n        return new SharedStringBuffer('keyNames', true, enabled, 1024);\n    }\n\n    public addString(s: string): number {\n        if (!this.enabled) {\n            return -1;\n        }\n        const bytes = new TextEncoder().encode(s);\n        if (bytes.length > 64) {\n            return -1;\n        }\n        if (s in this.stringMap) {\n            return this.stringMap[s];\n        }\n        if (this.keyMode) {\n            if (this.strings.length >= this.maxStrings) {\n                this.reset();\n            }\n        } else {\n            if (this.strings.length > this.maxStrings) {\n                this.reset();\n            }\n        }\n        const index = this.strings.length;\n        //console.log(`[${this.name}] ssb: add [${index}] '${s}'`);\n        this.strings.push(s);\n        this.stringMap[s] = index;\n        return index;\n    };\n\n    public getString(index: number): string {\n        //console.log(`[${this.name}] ssb: get [${index}] '${this.strings[index]}'`);\n        if (!this.enabled) {\n            throw new SmileError('shared strings are not enabled');\n        }\n        if (index >= this.strings.length) {\n            throw new SmileError(`shared string reference out of range`);\n        }\n        return this.strings[index];\n    };\n}\n","import {DecoderStream} from './decoderStream.js';\nimport {InputStream} from './inputStream.js';\nimport {SmileError} from './error.js';\nimport {SharedStringBuffer} from './sharedStringBuffer.js';\nimport {Decoder} from './decoder.js';\n\n/**\n * Parser options.\n */\nexport interface ParserOptions {\n}\n\n/**\n * Parse SMILE-encoded data.\n *\n * @param data SMILE-encoded data\n * @param options parser options\n */\nexport function parse(data: Uint8Array, options?: ParserOptions): any {\n    return new ParserContext(data, options).parse();\n}\n\nclass ParserContext {\n    private readonly decoderStream: DecoderStream;\n    private readonly options?: ParserOptions;\n    private readonly decoder: Decoder;\n    private sharedPropertyName: boolean;\n    private sharedStringValue: boolean;\n    private rawBinary: boolean;\n    private version: number;\n    private sharedPropertyNames: SharedStringBuffer;\n    private sharedStringValues: SharedStringBuffer;\n\n    constructor(data: Uint8Array, options?: ParserOptions) {\n        this.decoderStream = new DecoderStream(new InputStream(data));\n        this.options = options;\n        this.decoder = new Decoder();\n\n        this.sharedPropertyName = false;\n        this.sharedStringValue = false;\n        this.rawBinary = false;\n        this.version = 0;\n\n        // TODO\n        this.sharedPropertyNames = SharedStringBuffer.newKeyNames(false);\n        this.sharedStringValues = SharedStringBuffer.newValues(false);\n    }\n\n    public parse(): any {\n        // parse header\n        const b0 = this.decoderStream.read();\n        const b1 = this.decoderStream.read();\n        const b2 = this.decoderStream.read();\n\n        if ((b0 !== 0x3a) || (b1 !== 0x29) || (b2 !== 0x0a)) {\n            throw new SmileError('invalid Smile header');\n        }\n\n        const b3 = this.decoderStream.read();\n        this.sharedPropertyName = (b3 & 0x01) === 0x01;\n        this.sharedStringValue = (b3 & 0x02) === 0x02;\n        this.rawBinary = (b3 & 0x04) === 0x04;\n        this.version = b3 >> 4;\n\n        this.sharedPropertyNames = SharedStringBuffer.newKeyNames(this.sharedPropertyName);\n        this.sharedStringValues = SharedStringBuffer.newValues(this.sharedStringValue);\n\n        return this.readValue();\n    };\n\n    private readValue(): any {\n        const token = this.decoderStream.read();\n        const tokenClass = token >> 5;\n        const tokenValue = token & 0x1f;\n        switch (tokenClass) {\n            case 0: { // Short Shared Value String reference (single byte)\n                return this.sharedStringValues.getString(tokenValue);\n            }\n            case 1: { // Simple literals, numbers\n                return this.readSimpleLiteralValue(token);\n            }\n            case 2: { // Tiny ASCII (1 - 32 bytes == chars)\n                const value = this.decoderStream.readAscii(tokenValue + 1);\n                this.sharedStringValues.addString(value);\n                return value;\n            }\n            case 3: { // Short ASCII (33 - 64 bytes == chars)\n                const value = this.decoderStream.readAscii(tokenValue + 33);\n                this.sharedStringValues.addString(value);\n                return value;\n            }\n            case 4: { // Tiny Unicode (2 - 33 bytes; <= 33 characters)\n                const value = this.decoderStream.readUtf8(tokenValue + 2);\n                this.sharedStringValues.addString(value);\n                return value;\n            }\n            case 5: { // Short Unicode (34 - 64 bytes; <= 64 characters)\n                const value = this.decoderStream.readUtf8(tokenValue + 34);\n                this.sharedStringValues.addString(value);\n                return value;\n            }\n            case 6: { // Small integers (single byte)\n                return this.decoder.decodeZigZag(tokenValue);\n            }\n            case 7: { // Binary / Long text / structure markers\n                return this.readBinaryLongTextStructureValues(token);\n            }\n            default: {\n                throw new SmileError(`unknown token class: ${tokenClass}`);\n            }\n        }\n    }\n\n    private readSimpleLiteralValue(token: number): any {\n        if (token === 0x20) { // empty string\n            return '';\n        } else if (token === 0x21) { // null\n            return null;\n        } else if (token === 0x22) { // false\n            return false;\n        } else if (token === 0x23) { // true\n            return true;\n        } else if (token === 0x24) { // 32-bit integer; zigzag encoded, 1 - 5 data bytes\n            return this.decoderStream.readSignedVint();\n        } else if (token === 0x25) { // 64-bit integer; zigzag encoded, 5 - 10 data bytes\n            return this.decoderStream.readSignedVint();\n        } else if (token === 0x26) { // BigInteger\n            return this.decoderStream.readBigInt();\n        } else if (token === 0x28) { // 32-bit float\n            return this.decoderStream.readFloat32();\n        } else if (token === 0x29) { // 64-bit double\n            return this.decoderStream.readFloat64();\n        } else if (token === 0x2a) { // BigDecimal\n            return this.decoderStream.readBigDecimal();\n        } else {\n            throw new SmileError('invalid value token 0x' + token.toString(16));\n        }\n    }\n\n    private readBinaryLongTextStructureValues(token: number): any {\n        if (token === 0xe0) { // Long (variable length) ASCII text\n            return this.decoderStream.readLongAscii();\n        } else if (token === 0xe4) { // Long (variable length) Unicode text\n            return this.decoderStream.readLongUtf8();\n        } else if (token === 0xe8) { // Binary, 7-bit encoded\n            return this.decoderStream.readSafeBinary();\n        } else if ((token >= 0xec) && (token <= 0xef)) { // Shared String reference, long\n            const reference = ((token & 0x03) << 8) | this.decoderStream.read();\n            return this.sharedStringValues.getString(reference);\n        } else if (token === 0xf8) { // START_ARRAY\n            const array: any[] = [];\n            while (this.decoderStream.peek() !== 0xf9) { // END_ARRAY\n                array.push(this.readValue());\n            }\n            this.decoderStream.read(); // consume END_ARRAY\n            return array;\n        } else if (token === 0xfa) { // START_OBJECT\n            const object: { [key: string]: any } = {};\n            while (this.decoderStream.peek() !== 0xfb) { // END_OBJECT\n                const key = this.readKey();\n                const value = this.readValue();\n                object[key] = value;\n            }\n            this.decoderStream.read(); // consume END_OBJECT\n            return object;\n        } else if (token === 0xfd) { // Binary (raw)\n            const len = this.decoderStream.readUnsignedVint();\n            if (typeof(len) === 'bigint') {\n                throw new SmileError('invalid length');\n            }\n            return this.decoderStream.readBytes(len);\n        } else {\n            throw new SmileError('invalid value token 0x' + token.toString(16));\n        }\n    }\n\n    private readKey(): string {\n        const token = this.decoderStream.read();\n        if (token === 0x20) { // Special constant name '' (empty String)\n            return '';\n        } else if ((token >= 0x30) && (token <= 0x33)) { // 'Long' shared key name reference (2 byte token)\n            const reference = ((token & 0x03) << 8) | this.decoderStream.read();\n            return this.sharedPropertyNames.getString(reference);\n        } else if (token === 0x34) { // Long (not-yet-shared) Unicode name\n            return this.decoderStream.readLongUtf8();\n        } else if ((token >= 0x40) && (token <= 0x7f)) { // 'Short' shared key name reference\n            const reference = token & 0x3f;\n            return this.sharedPropertyNames.getString(reference);\n        } else if ((token >= 0x80) && (token <= 0xbf)) { // Short Ascii names\n            const s = this.decoderStream.readAscii((token & 0x3f) + 1);\n            this.sharedPropertyNames.addString(s);\n            return s;\n        } else if ((token >= 0xc0) && (token <= 0xf7)) { // Short Unicode names\n            const s = this.decoderStream.readUtf8((token & 0x3f) + 2);\n            this.sharedPropertyNames.addString(s);\n            return s;\n        } else {\n            throw new SmileError('invalid key token 0x' + token.toString(16));\n        }\n    }\n}\n"],"names":["SmileError","msg","bitMask","Decoder","bytes","value","n","v","buffer","view","i","bits","output","iByte","iBitsRemaining","oByte","oBitsWritten","currentInput","currentOutput","oIndex","bitsToWrite","DecoderStream","inputStream","len","scale","c","eofError","InputStream","array","endIndex","readData","SharedStringBuffer","name","keyMode","enabled","maxStrings","s","index","parse","data","options","ParserContext","b0","b1","b2","b3","token","tokenClass","tokenValue","reference","object","key"],"mappings":"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"}